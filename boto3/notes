---------------------------------------------------------------------------------------------------------
INTRODUCTION:
---------------------------------------------------------------------------------------------------------

    Boto3 is python SDK for AWS.
    Boto3 allows to create/update/delete AWS services from python scripts.
    It is built on top of botocore module.
    https://boto3.amazonaws.com/v1/documentation/api/latest/index.html


---------------------------------------------------------------------------------------------------------
INSTALLATION:
---------------------------------------------------------------------------------------------------------

    pip install boto3 


---------------------------------------------------------------------------------------------------------
AUTHENTICATION TO AWS:
---------------------------------------------------------------------------------------------------------

    1. Get the access key id & secret access key from security credentials.
    2. Use aws configure "aws configure --profile profile-name" or "aws configure" for default.
    3. try whether working by "aws s3 ls"


---------------------------------------------------------------------------------------------------------
BOTO3 CONCEPTS:
---------------------------------------------------------------------------------------------------------

Core concepts of boto3 are,

    SESSION: 
        By default, default session is created and use the default configuration. 
        It is AWS management console. 
        Profile which is used to authenticate to AWS.

        my_session = boto3.session.Session()
        my_session = boto3.session.Session(profile_name="developer")

    RESOURCE: 
        It is particular aws service console. 
        It is higher level object oriented service access and it is available for few services. 
        Output is object. 

    CLIENT:
        It is particular aws service console. 
        It is low level service access. 
        Output is interms of DICTIONARY. 
        
    META:
        It is useful to enter into client object from resource object. 

    COLLECTIONS:
        It returns all the values. 

    WAITERS:
        It is a way to block until certain state is reached. 

    PAGINATORS:
        No need to handle paging logic separately. 
        It helps to handle paging logic and can vary the size and max size of page. 


TYPES OF BOTO3 SESSIONS: 

    Custom session      -   create session and can pass profile.
    Default session     -   use default profile and no need of create session. 
    

---------------------------------------------------------------------------------------------------------
IMPLEMENT BOTO3 USING CLIENT OBJECT: 
---------------------------------------------------------------------------------------------------------

    It requires to use multiple for loop and dictionary to get the required values. 


---------------------------------------------------------------------------------------------------------
IMPLEMENT BOTO3 USING RESOURCE OBJECT: 
---------------------------------------------------------------------------------------------------------

    In documentation, it is separated into 3 parts,
        1. Create
        2. Existing single resource 
        3. Existing group of resource. 


---------------------------------------------------------------------------------------------------------
WORKING WITH STS: 
---------------------------------------------------------------------------------------------------------

    To refer the boto3-codes/sts.py 


---------------------------------------------------------------------------------------------------------
WAITERS: 
---------------------------------------------------------------------------------------------------------

    Resource waiter waits for 200s or 40 checks for every 5 sec. If still not finished, throw the error.

    CLient waiter waits for 40 checks for every 15 sec. 
    
    In documentation, given waiters is based on Client only.

    Can use both resource and client waiters together.


---------------------------------------------------------------------------------------------------------
META OBJECT: 
---------------------------------------------------------------------------------------------------------

    It is useful to enter into client object from resource object. 

    In a scenario, where started using resource object but require operation available only in client object, then this is useful.

    resource_object.meta.client.client_method()

    
---------------------------------------------------------------------------------------------------------
COLLECTIONS:
---------------------------------------------------------------------------------------------------------

        It is used with resource object. 
        Used to collect group of resources.


---------------------------------------------------------------------------------------------------------
PAGINATORS:
---------------------------------------------------------------------------------------------------------

        It is available for CLIENT object only not resource object. 
        It is helpful to query AWS resources.
        Page size can be changed.


---------------------------------------------------------------------------------------------------------
EXCEPTION HANDLING: 
---------------------------------------------------------------------------------------------------------

        try:
            print('Test block of code for errors')
        except ModuleNotFound:
            print("Module not found")
            print("Handle specific errors")
        except Exception as e:
            print(e)
            print("Handle any other errors")
        else:
            print("Execute when there is no error")
        finally:
            print("Execute code regardless of try and except blocks")

---------------------------------------------------------------------------------------------------------            
